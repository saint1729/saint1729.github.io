/**
 *  You have a Binary Search Tree (BST) , two elements of it are swapped by mistake. Recover the BST without changing its structure
 * 
 * Input: [1,3,null,null,2]  // n is the parent node, Left - 2n+1, Right - 2n+2 indexes will be child node, in case index does not exist then no children

   1
  /
 3
  \
   2
   
   Output : [3,1, null,null, 2]
   
   3
  /
 1
  \
   2
  
  Example 2 : 
   
  3
 / \
1   4
   /
  2


   
 **/


// do an inorder traversal and find 

class TreeNode {
    int data;
    TreeNode left, right;
    
    TreeNode(int data) {
        this.data = data;
        left = right = null;
    }
}


public static TreeNode constructBST(Integer[] a) {
    //
    return root;
}


public static void identifyMistakesUtil(TreeNode root, TreeNode prev, TreeNode firstMistake, TreeNode secondMistake) {
    
    
    if(root == null) {
        return;
    }
    
    identifyMistakesUtil(root.left, prev, firstMistake, secondMistake); // identifyMistakesUtil
    
    if((prev != null) && (root.data < prev.data)) {
        if(firstMistake == null) {
            firstMistake = prev;
            secondMistake = root;
        } else {
            secondMistake = root;
        }
    }
    
    prev = root;
    
    identifyMistakesUtil(root.right, prev, firstMistake, secondMistake);
    
}


public static void identifyAndCorrectMistakes(TreeNode root) {
    
    TreeNode prev = null, firstMistake = null, secondMistake = null; 
    
    identifyMistakesUtil(root, prev, firstMistake, secondMistake); 
    /* Ex#1
        identifyMistakesUtil(1, null, null, null); -->
        
        
        
        identifyMistakesUtil(3, null, null, null); --> prev = 3; 
        identifyMistakesUtil(2, 3, null, null); --> firstMistake = 3; prev = 2;
        identifyMistakesUtil(null, 3, null, null); --> return;
        
        // Prev = 1, FM = 3, SM = 1
    */
    
    /* Ex#2
        // Prev = 4, FM = 3, SM = 3
        identifyMistakesUtil(3, null, null, null) -->
        identifyMistakesUtil(1, null, null, null) (Prev 1) -->
        identifyMistakesUtil(3, 1, null, null) -->
        identifyMistakesUtil(4, 3, null, null) -->
        identifyMistakesUtil(2, 3, 3, null) -->
        identifyMistakesUtil(4, 2, 3, 2) -->
        identifyMistakesUtil(3, 4, 3, 2)
        
        
        
    */
    
    TreeNode temp = new TreeNode(firstMistake.data); // Temp (3)
    firstMistake.data = secondMistake.data; 
    secondMistake.data = temp.data;
    
}

public static void printInorderTraversal(TreeNode root) {
    //
}



public static void main(String[] args) {
    
    Integer a[] = getBSTInputAsArray();
    
    TreeNode root = constructBST(a);
    
    // root(1) --> Left(3) --> right (2)
    
    // root (3) --> left(1) , right(4) --> left (2)
    
    identifyAndCorrectMistakes(root);
    
    printInorderTraversal(root);
    
}

/*
Correction 1: (prev != null) , NPE
Correction 2 : Parameter check not complete
*/

/**
 * 
 * Problem 2 : You are given two strings as an input S1 and S2, print minimum window of characters in string S1 which contains all characters of string S2 atleast once,
 * contains only charcter from A-Z (upperx)aca
 * - No characters getting repeated in S2
 * se
 * 
 * S1 : ADOBECODEBANC
 * S2 : ABC
 * 
 * Substring 1 : ADOBEC (6)
 * Substring 2: BECODEBA (8)
 * Substring 3: CODEBA (6)
 * Substing 4 : BANC (4)
 * 
 * Output : BANC
 * 
 * If there is no such window , then print EMPTY String ""
 * 
 * S1: ADOBECODEBANC
 * S2 : ABY
 * 
 * Output : 
 * 
 **/



static final int TOTAL_CHARS = 26;


public static String getMinimumWindow(String s1, String s2) {
    
    
    int m = s1.length(), n = s2. length();
    
    
    if(m < n) {
        return "";
    }
    
    int count_s1[] = new int[TOTAL_CHARS];
    int count_s2[] = new int[TOTAL_CHARS];
    
    
    for(int i = 0; i < n; i++) {
        count_s2[s2.charAt(i) - 'a'] += 1;
    }
    
    
    int min_window_length = Integer.MAX_VALUE, count = 0, start_index = Integer.MIN_VALUE, window_start = 0;
    
    for(int i = 0; i < m; i++) {
        
        count_s1[s1.charAt(i) - 'a'] += 1;
        
        if((count_s2[s1.charAt(i) - 'a'] != 0)  && (count_s1[s1.charAt(i) - 'a'] <= count_s2[s1.charAt(i) - 'a'])) {
            count += 1;
        }
        
        if (count == n) {
            
            while((count_s1[s1.charAt(window_start) - 'a'] > count_s2[s1.charAt(window_start) - 'a'])) {
                count_s1[s1.charAt(window_start) - 'a'] -= 1;
                window_start += 1;
            }
            
            int window_length = i - window_start + 1;
            
            if (min_window_length > window_length) {
                min_window_length = window_length;
                start_index = window_start;
            }
            
        }
        
    }
    
    
    if (start_index > 0) {
        return s1.substring(start_index, start_index + min_window_length);
    } else {
        return "";
    }
    
    
}































